{
    // Bone框架全局变量
	"Bone info": {
		"prefix": "Bone.info",
		"body": [
			"Bone.info"
		],
		"description": "Bone获取基本信息"
	},
	"Bone info OS": {
		"prefix": "Bone.info.OS",
		"body": [
			"Bone.info.OS"
		],
		"description": "Bone获取基本信息"
	},
	"Bone info appVersion": {
		"prefix": "Bone.info.appVersion",
		"body": [
			"Bone.info.appVersion"
		],
		"description": "Bone获取native版本"
	},
	"Bone info runtimeVersion": {
		"prefix": "Bone.info.runtimeVersion",
		"body": [
			"Bone.info.runtimeVersion"
		],
		"description": "Bone获取ReactNative容器SDK版本"
	},
	"Bone info sdkVersion": {
		"prefix": "Bone.info.sdkVersion",
		"body": [
			"Bone.info.sdkVersion"
		],
		"description": "Bone获取sdk版本"
	},
	"Bone info cdnEnv": {
		"prefix": "Bone.info.cdnEnv",
		"body": [
			"Bone.info.cdnEnv"
		],
		"description": "Bone调试环境: alpha test release"
	},
	"Bone info bundleUrl": {
		"prefix": "Bone.info.bundleUrl",
		"body": [
			"Bone.info.bundleUrl"
		],
		"description": "Bone运行的业务bundelURL"
	},
	"Bone Size": {
		"prefix": "Bone.size",
		"body": [
			"Bone.size"
		],
		"description": "Bone获取屏幕的尺寸"
	},
	"Bone Size Weigth": {
		"prefix": "Bone.size.width",
		"body": [
			"Bone.size.width"
		],
		"description": "Bone获取屏幕的宽度"
	},
	"Bone Size Height": {
		"prefix": "Bone.size.height",
		"body": [
			"Bone.size.height"
		],
		"description": "Bone获取屏幕的高度"
	},

	// app
	"Bone app router": {
		"prefix": "BoneRouter",
		"body": [
			"app.router('${name}', app.controller.${name}, {",
			"	title: \"${title:主页}\",",
			"	barType: \"${type:static}\"",
			"}).build('${name}');"
		],
		"description": "Bone控制器初始化"
	},

	// 控制器 -> 页面生命周期
	"Bone Controller init": {
		"prefix": "BoneController",
		"body": [
			"class $1 extends module.BoneController {",
			"	constructor(ctx) {",
			"		super(ctx)",
			"		$1",
			"	}",
			"}"
		],
		"description": "Bone控制器初始化"
	},
	"Bone pageWillAppear": {
		"prefix": "pageWillAppear",
		"body": [
			"pageWillAppear() {",
			"$1",
			"}"
		],
		"description": "Bone当页面即将出现时调用"
	},
	"Bone pageDidAppear": {
		"prefix": "pageDidAppear",
		"body": [
			"pageDidAppear() {",
			"$1",
			"}"
		],
		"description": "Bone当页面已经出现时调用"
	},
	"Bone pageWillDisappear": {
		"prefix": "pageWillDisappear",
		"body": [
			"pageWillDisappear() {",
			"$1",
			"}"
		],
		"description": "Bone当页面即将退出时调用"
	},

	// 视图层 
	"Bone View init": {
		"prefix": "BoneView",
		"body": [
			"class $1 extends Component {",
			"	constructor(props, context) {",
			"		super(props, context);",
			"		$1",
			"	}",
			"   render() {",
			"		$2",
        	"		return $3",
			"	}",
			"}"
		],
		"description": "Bone控制器初始化"
	},

	// Service 层 
	"Bone Base Service init": {
		"prefix": "BoneBaseService",
		"body": [
			"class ${name} extends module.BaseService {",
			"	constructor(uuid) { ",
			"      super(uuid)",
			"      if (Bone.singletonForKey('${name}')) {",
            "			return Bone.singletonForKey('${name}');",
       		"	   }",
			"      Bone.singletonForKey('${name}', this);",
			"	}",
			"}"
		],
		"description": "Bone BaseService初始化"
	},
	"Bone Device Service init": {
		"prefix": "BoneDeviceService",
		"body": [
			"class ${name} extends module.DeviceService {",
			"	constructor(uuid) { ",
			"      super(uuid)",
			"      if (Bone.singletonForKey('${name}')) {",
            "			return Bone.singletonForKey('${name}');",
       		"	   }",
			"      Bone.singletonForKey('${name}', this);",
			"   }",
			"}"
		],
		"description": "Bone DeviceService初始化"
	},
    // React Native 生命周期
	"React Native getInitialState": {
		"prefix": "getInitialState",
		"body": [
			"getInitialState() {",
			"	$1",
			"}"
		],
		"description": "初始化组件的状态。\n在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态"
	},
    "React Native componentWillMount": {
		"prefix": "componentWillMount",
		"body": [
			"componentWillMount() {",
			"	$1",
			"}"
		],
		"description": "在第一次绘制render()之前。\n这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。"
	},
    "React Native componentDidMount": {
		"prefix": "componentDidMount",
		"body": [
			"componentDidMount() {",
			"	$1",
			"}"
		],
		"description": "虚拟DOM已经构建完成。\n这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发。"
	},
    "React Native componentWillReceiveProps": {
		"prefix": "componentWillReceiveProps",
		"body": [
			"componentWillReceiveProps(nextProps) {",
			"	$1",
			"}"
		],
		"description": "即将被设置新属性。\n输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。"
	},
    "React Native shouldComponentUpdate": {
		"prefix": "shouldComponentUpdate",
		"body": [
			"shouldComponentUpdate(nextProps, nextState) {",
			"	$1",
			"}"
		],
		"description": "即将被设置的属性和更新的状态值，如果true表示需要更新。\n输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。\n默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。"
	},
    "React Native componentWillUpdate": {
		"prefix": "componentWillUpdate",
		"body": [
			"componentWillUpdate(nextProps, nextState) {",
			"	$1",
			"}"
		],
		"description": "紧接着这个函数就会调用render()来更新界面。\n输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。"
	},
    "React Native componentDidUpdate": {
		"prefix": "componentDidUpdate",
		"body": [
			"componentDidUpdate(prevProps, prevState) {",
			"	$1",
			"}"
		],
		"description": "已完成属性和状态的更新。"
	},
    "React Native componentWillUnmount": {
		"prefix": "componentWillUnmount",
		"body": [
			"componentWillUnmount() {",
			"	$1",
			"}"
		],
		"description": "当组件要被从界面上移除的时候，就会调用 componentWillUnmount()。"
	}
}